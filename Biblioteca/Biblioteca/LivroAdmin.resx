<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADE
        E0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxB
        BADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QA
        QDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQDxBBADEE0QAQLxJEB12
        5srmIgBAgsPPvrVMTf5pLAIAJDji3NvL1JEX3tlcBABIMGmhoy+7p7kIAJDg1y10xQM7LQAApJi00IlX
        PdRcBABIcPr3V5epyT+NRQCABGctXVOmLl/5s+YiAECCSQvdvHpDcxEAIMGkhR597vXmIgBAgkkLvf72
        5uYiAMDoDj5uedm46b0ytW3btnLoaSuaBwEAjKxuYVZbaBJER3317uZBAAAjqw20PYhciwgASFQvP7Q9
        iK6599nmQQAAI6sNtD2InntlY/MgAICR1QbaHkRVPamodSAAwIimT6ieFUTOIwIAktT22SmInEcEACSZ
        Pn9oVhA5jwgASDJ9/tCsIKqcRwQAJJh5/lA1K4gm2983/ggAYCS1eWY20KwgstErAJCgNs/MBpoVRNXh
        Z9/a/EMAgBEcce7ts9qn2imILrrhieYfAwCM4PKVP5vVPtVOQfTMS2+Vg45t3wAAwGJWG2f9yzt+XTZt
        pyCq7H4PAIxoenf7D2sG0fd+/EzzRgAAFrOZF2OcqRlE72/ZWj5xxs3NGwIAWIx+7/QVk8ZptU8ziKrv
        3LaueWMAAItRbZtW81S7DKJ3Nr9fPn7Kjc0bBABYTOqnQ7VtWs1T7TKIKj/BPzAOOevq8kdfuwqAAdX3
        +NZ7P/Or9VP7mXYbRK9v3OxTogPgmFsvLlduOw2AAR3zo0ua7/3Mn4+ffGN5/e3NzdaZttsgqs5b9mjz
        xpk/gghgXIJo4dWWaTXOTB8ZRG9teq/8wRfsgr+QBBHAuATRwqoNU1um1TgzfWQQVcsffL55J8wPQQQw
        LkG0sGrDtNrmw/YoiKq/vuQnzTti7gkigHEJooXzl19rX5W6ZY+D6KkX3iwHH7e8eYfMLUEEMC5BtDBq
        s6z7oF1aTdOyx0FUnbV0TfNOmVuCCGBcgmhh1GZptcyu7FUQ1ZOSDvn8Tc07Zu4IIoBxCaL5t6cnUs+0
        V0FUrf75q+Vjn/PV2XwSRADjEkTzqzbKmmdfazbM7ux1EFX2OZtfgghgXIJofu1uv7Ld2acgqj6zZFXz
        gbD/BBHAuATR/Pn0N+5rNsue2OcgqpfA/uQXb2k+IPaPIAIYlyCaH4edufIjt+fYnX0Oosr5RPNDEAGM
        SxDNvX09b2im/Qqi6vpVzzUfHPtOEAGMSxDNvdoirUbZG/sdRFXdUr/1ANk3gghgXIJobtUGabXJ3pqT
        IKpctHHuCCKAcQmiubO3F1/cnTkLoi1bt5ZPL7mv+YDZO4IIYFyCaG7U5qjt0WqSfTFnQVRtem9L+auL
        bQK7vwQRwLgE0f6rrVGbo9Ui+2pOg6iql8r+1Dm3NZ8Ae0YQAYxLEO2f2hh7uy3HnpjzIKre/aDa/vYb
        vj7bV4IIYFyCaN/9zeX3Thqj1R77a16CqHp/y9Zy6n/8tPmE2D1BBDAuQbRvTv63hydt0WqOuTBvQTTt
        nOsfbT4xdk0QAYxLEO29f7x27n5NtivzHkTVkh89WQ46tv0k2ZkgAhiXINpztR32dbPWvbUgQVTd+fiL
        5dDTVjSfMLMJIoBxCaI987unrih3P/FSsynmw4IFUfXSG5vK0Zfe03zi7CCIAMYliD5a3bX+5Tc3NVti
        vixoEFVbt24rV931dPmt43/YfBEQRAAjE0S7VtvgX+94utkP823Bg2ja2g1vlE992fWKWgQRwLgEUduf
        nHdHefJ/3mw2w0I4YEFU1WsJXHzT2vKbPi2aRRABjEsQzVYboLbAfF1faE8d0CCa9syLb5W/uOjHzRcq
        kSACGJcg2qHO/toArTZYaF0EUVXPLbpu1fpyyOdvar5oSQQRwLgE0bLJrF963/rJ7G81wYHQTRBN++Vb
        75aTvvdw8wVMIYgAxpUeRHXG11nfaoADqbsgmrbuhTfL8Vc+WA4+bnnzBR2ZIAIYV2IQfexzy8sp//7T
        yWxvzfwedBtE09a/vLGcefUjUT/TF0QA40oKojq7v/Cfj5QNr77TnPE96T6IptWLOtZ90RLOMRJEAONK
        CKI6q+vMrrO7NdN7tGiCaFrd6fb2R18o/3DVQ+V3Trqh+R+x2AkigHGNGkS/feIN5YQrHyq3fTCj53NX
        +vmy6IJopk3vbSk3PvyL8vffvn+or9QEEcC4RgqiOnv/7luryg0P/WIyk1uzerFY1EE009vvvj/ZBO78
        5Y+VP7/gzkV9MrYgAhjXYg6iOlv/7IMZ+8/LHit3Pf7iZPa2ZvJiNEwQfdgb77xXVj6yoXzpmkfKkRfe
        uai+XhNEAONaTEFUZ2edoXWW3rx6w2S2tmbuCIYNopa6c+4D614p19z7bLlg+WOTr9rqVTL/9Pw7yh9/
        +bbyh1+6pRx62ooDHk+CCGBcBzqI6oyrs+6TX7xlMvvqDKyz8LNXPFC+8l+Pl2vvW18efPqXXV4raD5F
        BdFi8fy7q8vqt66DHFuWQYznt65pvvdzYAmiDv3qu98t5cgjIcf6MyDGr167qfnez4EliDokiIjTGBow
        KkHUJ0HUIUFEnMbQgFEJoj4Jog4JIuI0hgaMShD1SRB1SBARpzE0YFSCqE+CqEOCiDiNoQGjEkR9EkQd
        EkTEaQwNGJUg6pMg6pAgIk5jaMCoBFGfBFGHBBFxGkMDRiWI+iSIOiSIiNMYGjAqQdQnQdQhQUScxtCA
        UQmiPgmiDgki4jSGBoxKEPVJEHVIEBGnMTRgVIKoT4KoQ4KIOI2hAaMSRH0SRB0SRMRpDA0YlSDqkyDq
        kCAiTmNowKgEUZ8EUYcEEXEaQwNGJYj6JIg6JIiI0xgaMCpB1CdB1CFBRJzG0IBRCaI+CaIOCSLiNIYG
        jEoQ9UkQdUgQEacxNGBUgqhPgqhDgog4jaEBoxJEfRJEHRJExGkMDRiVIOqTIOqQICJOY2jAqARRnwRR
        hwQRcRpDA0YliPokiDokiIjTGBowKkHUJ0HUIUFEnMbQgFEJoj4Jog4JIuI0hgaMShD1SRB1SBARpzE0
        YFSCqE+CqEOCiDiNoQGjEkR9EkQdEkTEaQwNGJUg6pMg6pAgIk5jaMCoBFGfBFGHBBFxGkMDRiWI+iSI
        OiSIiNMYGjAqQdQnQdQhQUScxtCAUQmiPgmiDgki4jSGBoxKEPVJEHVIEBGnMTRgVIKoT4KoQ4KIOI2h
        AaMSRH0SRB0SRMRpDA0YlSDqkyDqkCAiTmNowKgEUZ8EEQAQTxABAPEEEQAQTxABAPEEEQAQTxABAPEE
        EQAQTxABAPEEEQAQTxABAPEEEQAQTxABAPEEEQAQTxABAPEEEQAQTxABAPEEEQAQblv5fxnACEgeTR++
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>